#!/usr/bin/env bash

set -euo pipefail

command="${1:-}"
firstArg="${2:-}"

args=${@:2}
args_array=( "${@:2}" )

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	GENV_ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$( readlink "$SOURCE" )"
	[[ ${SOURCE} != /* ]] && SOURCE="$GENV_ROOT/$SOURCE"
done

#% üîπ GENV_ROOT %% Genv root directory %% $HOME/genv
export GENV_ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#% üîπ GENV_TASKS_ROOT %% Tasks directory relative to Genv root %% $HOME/genv/tasks
export GENV_TASKS_ROOT=${GENV_ROOT}/tasks

#% üîπ GENV_SERVICES_ROOT %% Services directory relative to Genv root %% $HOME/genv/services
export GENV_SERVICES_ROOT=${GENV_ROOT}/services

#% üîπ GENV_VENDOR_ROOT %% Vendor (plugins) directory relative to Genv root %% $HOME/genv/vendor
export GENV_VENDOR_ROOT=${GENV_ROOT}/vendor

#% üîπ GENV_IMAGES_ROOT %% Compressed Docker images directory relative to Genv root %% $HOME/genv/images
export GENV_IMAGES_ROOT=${GENV_ROOT}/images

#% üîπ GENV_LIB_ROOT %% Libraries directory relative to Genv root %% $HOME/genv/lib
export GENV_LIB_ROOT=${GENV_ROOT}/lib

if [[ "$command" == "initpath" ]]; then
	echo "${GENV_ROOT}/completion/init.sh" && exit 0
fi


# functions
func=$(ls ${GENV_ROOT}/core/func)
for f in ${func}; do
	source ${GENV_ROOT}/core/func/${f}
done


# variables
vars=$(ls ${GENV_ROOT}/core/vars)
for f in ${vars}; do
	source ${GENV_ROOT}/core/vars/${f}
done

source ${GENV_ROOT}/core/parse.sh

moduleName=$(parseModule ${command})

if [[ -v USE_DIND && "$moduleName" != "dind" ]]; then
	printInfo "Genv is running in dind mode"
	${GENV_DIND_EXEC_TTY} genv "$@"
	exit $?
fi

# this should always be loaded AFTER core vars and func
source ${GENV_ROOT}/core/boot.sh

source ${GENV_TASKS_ROOT}/tasks.sh

source ${GENV_SERVICES_ROOT}/services.sh

# setup temp directory
mkdir -p ${GENV_TEMP}

case "${command}" in
	compose) ## <arg>... %% üê≥  Run docker-compose for the Genv core services
		${GENV_DOCKER_COMPOSE} ${args} ;;

	cmplt)
		source ${GENV_ROOT}/completion/completion.sh ;;

	gen-dnsmasq)
		generateDnsmasqConfig ;;

	config-docker)
		configDocker ;;

	config-docker-network)
		configDockerNetwork ;;

	env) ## %% List all current environment variables
		if [ -v PAGER ]; then
			env | sort | ${PAGER}
		else
			env | sort
		fi
		;;

	env:doc) ## [<task> | <service>] %% List available/exported environment variables
		envdoc ;;

	func) #todo List built-in functions
		;;

	help) ## [<task> | <service>] %% ‚ÅâÔ∏è  Get help for a task or service
		help ;;

	--help|-h)
		help ;;

	show-docker-host-ip)
		echo ${GENV_DOCKER_HOST_IP} ;;

	up) ## %% üèÅ  Install Genv and start core services
		up ;;

	install) ## %% Alias for `up`
		up ;;

	down) ## [<all>] %% üîΩ  Stop and remove Genv core, and optionally, supporting services
		down ${args} ;;

	uninstall) ## [<all>] %% Alias for `down`
		down ${args} ;;

	reset) ## %% üåØ  Stop, remove, and restart Genv core services
		reset ;;

	self-update) ## %% üí´  Update Genv and plugins
		selfUpdate ;;

	selfupdate) ## %% Alias for `self-update`
		selfUpdate ;;

	clean) ## [<all>] %% üõÄ  Completely uninstall Genv core, and optionally, all supporting services
		clean ${args} ;;

	services:ls)
		listServices ;;

	services:list)
		listServices ;;

	services:status) ## %% üö¶  Display the status for all supporting services
		servicesStatus ;;

	status) ## %% üö•  Display the status of Genv core services
		downServices=0
		for i in dnsmasq consul registrator traefik; do
			IS_UP=$(${GENV_DOCKER_COMPOSE} ps ${i} | grep 'Up') || true
			if [[ ${IS_UP} ]]; then
				printf "%-20s%s\n" "${i}" "${UP}"
			else
				printf "%-20s%s\n" "${i}" "${DOWN}"
				downServices+=1
			fi
		done
		if [ ${downServices} -gt 0 ]; then
			exit 1
		fi
		;;

	tasks:ls)
		listTasks ;;

	tasks:list)
		listTasks ;;

	service) ## <name> <command> [<arg>...] %% üçΩ  Run a command for a service
		source ${GENV_SERVICES_ROOT}/tasks.sh ;;

	stfu) ## %% ü§ê  Please stop talking
		echo "export GENV_SPEECH=false" >> $HOME/genv.env.sh ;;

	greet)
		speakGreeting ;;

	radio)
		say -v Fred -r 190 "Fitter. Happier. More productive." ;;

	*)
		if [ "${moduleName}" == "" ]; then printAllHelp; fi

		# try tasks
		taskExists ${moduleName}

		if [ -v TASK_ROOT ]; then
			if [[ "${firstArg:-}" == "--help" || "${firstArg:-}" == "-h" ]]; then
				taskHelp ${moduleName}
				exit $?
			fi

			source ${TASK_ROOT}/handler.sh
		else
			# try services
			svcRoot=$(serviceRoot ${moduleName})

			if [[ "$svcRoot" != "" ]]; then
				handleService ${moduleName} ${command};
			elif [ -v ROOT_TASKS_FILE ]; then
				# try custom task/command handler in working directory
				command=${command#${PROJECT_TASK_PREFIX}:}
				source ${ROOT_TASKS_FILE}
			fi
		fi
esac
